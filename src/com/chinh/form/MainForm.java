/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chinh.form;

import com.chinh.falcuty.FacultyDAO;
import com.chinh.falcuty.FacultyDTO;
import com.chinh.lecturer.LecturerDAO;
import com.chinh.lecturer.LecturerDTO;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.*;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Admin
 */
public class MainForm extends javax.swing.JFrame {

    private String filePath; // image path 

    /**
     * Creates new form Faculty_management
     *
     * @throws java.sql.SQLException
     */
    public MainForm() throws SQLException {
        initComponents();

        // load table falcuty
        FacultyDAO fdao = new FacultyDAO();
        List<FacultyDTO> listF = fdao.getAllFaculty();
        DefaultTableModel model = (DefaultTableModel) facultyTable.getModel();
        for (FacultyDTO o : listF) {
            model.addRow(new Object[]{
                o.getFacultyID(), o.getFacultyName(), o.getLocation(), o.getCellphone()
            });
        }

        // load table lecturer
        LecturerDAO ldao = new LecturerDAO();
        List<LecturerDTO> listL = ldao.getAllLecturer();
        DefaultTableModel model2 = (DefaultTableModel) lecturerTable.getModel();
        for (LecturerDTO o : listL) {
            model2.addRow(new Object[]{
                o.getLecturerID(), o.getLecturerName(), o.getBirthday(), o.isGender() == true ? "Male" : "Female", o.getEthnic(), o.getReligion(),
                o.getNationality(), o.getAddress(), o.getSubject(), o.getFacultyID()
            });
        }

        // load combo box falcuty in lecturer screen
        for (FacultyDTO o : listF) {
            cmbFaculty.addItem(o.getFacultyID() + " - " + o.getFacultyName());
        }

        // load combo box ethnic in lecturer screen
        List<LecturerDTO> listEthnic = ldao.getEthnicName();
        for (LecturerDTO o : listEthnic) {
            cmbEthnic.addItem(o.getCmbName());
        }

        // load combo box religion in lecturer screen
        List<LecturerDTO> listReligion = ldao.getReligion();
        for (LecturerDTO o : listReligion) {
            cmbReligion.addItem(o.getCmbName());
        }

        // load combo box nationality in lecturer screen
        List<LecturerDTO> listNationality = ldao.getNationality();
        for (LecturerDTO o : listNationality) {
            cmbNationality.addItem(o.getCmbName());
        }

        // center main form
        centreWindow(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        tabedPane = new javax.swing.JTabbedPane();
        jToolBar1 = new javax.swing.JToolBar();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        facultyTable = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtFalcutyID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFacultyName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        txtCellphone = new javax.swing.JTextField();
        btnAddNewFaculty = new javax.swing.JButton();
        btnUpdateFaculty = new javax.swing.JButton();
        btnDeleteFaculty = new javax.swing.JButton();
        btnSaveAddFaculty = new javax.swing.JButton();
        labelCheckPhone = new javax.swing.JLabel();
        jToolBar2 = new javax.swing.JToolBar();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lecturerTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtLecturerID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnRadioMale = new javax.swing.JRadioButton();
        btnRadioFemale = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cmbNationality = new javax.swing.JComboBox<>();
        cmbReligion = new javax.swing.JComboBox<>();
        cmbEthnic = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        labelFacultyIDLec = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        btnAddLecturer = new javax.swing.JButton();
        btnUpdateLecturer = new javax.swing.JButton();
        btnDeleteLecturer = new javax.swing.JButton();
        btnBirthdayChooser = new com.toedter.calendar.JDateChooser();
        labelImage = new javax.swing.JLabel();
        btnSaveAddLecturer = new javax.swing.JButton();
        btnBrowse = new javax.swing.JButton();
        txtSubject = new javax.swing.JTextField();
        cmbFaculty = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(0, 0));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Faculty Management Application");

        tabedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabedPaneMouseClicked(evt);
            }
        });

        jToolBar1.setRollover(true);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Main part"));

        jLabel2.setText("LIST OF FACULTY");

        facultyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Faculty’s ID", "Faculty‘s name", "Location", "Cell phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        facultyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                facultyTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(facultyTable);
        if (facultyTable.getColumnModel().getColumnCount() > 0) {
            facultyTable.getColumnModel().getColumn(0).setResizable(false);
            facultyTable.getColumnModel().getColumn(1).setResizable(false);
            facultyTable.getColumnModel().getColumn(2).setResizable(false);
            facultyTable.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(343, 343, 343))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Detailed part"));

        jLabel3.setText("FacultyID:");

        txtFalcutyID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFalcutyIDKeyTyped(evt);
            }
        });

        jLabel4.setText("Faculty name:");

        jLabel5.setText("Location:");

        txtFacultyName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFacultyNameKeyTyped(evt);
            }
        });

        jLabel6.setText("Cell phone:");

        txtLocation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLocationKeyTyped(evt);
            }
        });

        txtCellphone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCellphoneKeyTyped(evt);
            }
        });

        btnAddNewFaculty.setText("Add new");
        btnAddNewFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewFacultyActionPerformed(evt);
            }
        });

        btnUpdateFaculty.setText("Update");
        btnUpdateFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateFacultyActionPerformed(evt);
            }
        });

        btnDeleteFaculty.setText("Delete");
        btnDeleteFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteFacultyActionPerformed(evt);
            }
        });

        btnSaveAddFaculty.setText("Save");
        btnSaveAddFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAddFacultyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelCheckPhone)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(26, 26, 26)
                        .addComponent(txtFalcutyID, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(2, 2, 2)
                        .addComponent(txtFacultyName, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(31, 31, 31)
                        .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(txtCellphone, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnAddNewFaculty)
                        .addGap(90, 90, 90)
                        .addComponent(btnSaveAddFaculty)
                        .addGap(124, 124, 124)
                        .addComponent(btnUpdateFaculty)
                        .addGap(90, 90, 90)
                        .addComponent(btnDeleteFaculty))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(labelCheckPhone)
                .addGap(49, 49, 49)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3))
                    .addComponent(txtFalcutyID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel4))
                    .addComponent(txtFacultyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel5))
                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel6))
                    .addComponent(txtCellphone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddNewFaculty)
                        .addComponent(btnSaveAddFaculty))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDeleteFaculty)
                        .addComponent(btnUpdateFaculty))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jToolBar1.add(jPanel1);

        tabedPane.addTab("Faculty", jToolBar1);

        jToolBar2.setRollover(true);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Main part"));

        jLabel7.setText("LIST OF LECTURER");

        lecturerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "LecturerID", "Full name", "Birthday", "Gender", "Ethnic", "Religion", "Nationality", "Address", "Subject", "FacultyID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lecturerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lecturerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lecturerTable);
        if (lecturerTable.getColumnModel().getColumnCount() > 0) {
            lecturerTable.getColumnModel().getColumn(0).setResizable(false);
            lecturerTable.getColumnModel().getColumn(1).setResizable(false);
            lecturerTable.getColumnModel().getColumn(2).setResizable(false);
            lecturerTable.getColumnModel().getColumn(3).setResizable(false);
            lecturerTable.getColumnModel().getColumn(4).setResizable(false);
            lecturerTable.getColumnModel().getColumn(5).setResizable(false);
            lecturerTable.getColumnModel().getColumn(6).setResizable(false);
            lecturerTable.getColumnModel().getColumn(7).setResizable(false);
            lecturerTable.getColumnModel().getColumn(8).setResizable(false);
            lecturerTable.getColumnModel().getColumn(9).setResizable(false);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(307, 307, 307))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Detailed part"));

        jLabel8.setText("LecturerID:");

        txtLecturerID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLecturerIDKeyTyped(evt);
            }
        });

        jLabel9.setText("Full name:");

        txtFullName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFullNameKeyTyped(evt);
            }
        });

        jLabel10.setText("Birthday:");

        jLabel11.setText("Religion:");

        jLabel12.setText("Gender:");

        buttonGroup1.add(btnRadioMale);
        btnRadioMale.setSelected(true);
        btnRadioMale.setText("Male");

        buttonGroup1.add(btnRadioFemale);
        btnRadioFemale.setText("Female");

        jLabel13.setText("Ethnic:");

        jLabel14.setText("Nationality:");

        jLabel15.setText("Address:");

        txtAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAddressKeyTyped(evt);
            }
        });

        labelFacultyIDLec.setText("Falcuty:");

        jLabel17.setText("Subject:");

        btnAddLecturer.setText("Add new");
        btnAddLecturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLecturerActionPerformed(evt);
            }
        });

        btnUpdateLecturer.setText("Update");
        btnUpdateLecturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateLecturerActionPerformed(evt);
            }
        });

        btnDeleteLecturer.setText("Delete");
        btnDeleteLecturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteLecturerActionPerformed(evt);
            }
        });

        btnBirthdayChooser.setDateFormatString("yyyy/MM/dd\n");
        btnBirthdayChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                btnBirthdayChooserPropertyChange(evt);
            }
        });

        labelImage.setText("        No image");

        btnSaveAddLecturer.setText("Save");
        btnSaveAddLecturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAddLecturerActionPerformed(evt);
            }
        });

        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        txtSubject.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSubjectKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel13)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnRadioFemale)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtLecturerID, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnBirthdayChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtAddress)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnRadioMale)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(cmbEthnic, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(46, 46, 46)
                                                .addComponent(jLabel11)
                                                .addGap(18, 18, 18)
                                                .addComponent(cmbReligion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                        .addComponent(jLabel14)
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cmbNationality, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(btnBrowse)
                                                .addGap(26, 26, 26)))))
                                .addGap(17, 17, 17))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(labelFacultyIDLec)
                            .addComponent(btnAddLecturer))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnSaveAddLecturer)
                                .addGap(152, 152, 152)
                                .addComponent(btnUpdateLecturer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDeleteLecturer)
                                .addContainerGap())
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSubject)
                                    .addComponent(cmbFaculty, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(355, 355, 355))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtLecturerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(25, 25, 25)
                                .addComponent(btnBrowse)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnBirthdayChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnRadioMale)
                                    .addComponent(jLabel12)))))
                    .addComponent(labelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(btnRadioFemale)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(cmbEthnic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(cmbReligion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbNationality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFacultyIDLec)
                    .addComponent(cmbFaculty))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddLecturer)
                    .addComponent(btnUpdateLecturer)
                    .addComponent(btnDeleteLecturer)
                    .addComponent(btnSaveAddLecturer))
                .addGap(28, 28, 28))
        );

        cmbFaculty.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jToolBar2.add(jPanel4);

        tabedPane.addTab("Lecturer", jToolBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabedPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // set data into faculty detailed part when click on a row
    private void facultyTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facultyTableMouseClicked
        int row = facultyTable.getSelectedRow();
        String facultyID = facultyTable.getValueAt(row, 0).toString();
        String facultyName = facultyTable.getValueAt(row, 1).toString();
        String location = facultyTable.getValueAt(row, 2).toString();
        String cellphone = facultyTable.getValueAt(row, 3).toString();

        txtFalcutyID.setText(facultyID);
        txtFacultyName.setText(facultyName);
        txtLocation.setText(location);
        txtCellphone.setText(cellphone);
        txtFalcutyID.setEditable(false);
    }//GEN-LAST:event_facultyTableMouseClicked

    // check validation for facultyID input
    private void txtFalcutyIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFalcutyIDKeyTyped
        char c = evt.getKeyChar();
        String facultyID = txtFalcutyID.getText();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        int length = (facultyID + c).length();
        if (length > 10) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Faculty’s ID field's max length is 10!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isLetterOrDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Faculty’s ID field must not contains special characters!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtFalcutyIDKeyTyped

    // check validation for faculty name input
    private void txtFacultyNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFacultyNameKeyTyped
        char c = evt.getKeyChar();
        String facultyName = txtFacultyName.getText();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        int length = (facultyName + c).length();
        if (length > 50) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Faculty’s Name field's max length is 50!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isLetterOrDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Faculty’s Name field must only contain letters and digits!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtFacultyNameKeyTyped

    // check validation for location input
    private void txtLocationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLocationKeyTyped
        char c = evt.getKeyChar();
        String location = txtLocation.getText();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        String regex = "^[a-zA-Z0-9/ -,.]*$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(Character.toString(c));
        boolean isMatch = matcher.find();
        int length = (location + c).length();

        if (length > 100) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Location field's max length is 100!!!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!isMatch) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Location field must only contain letters, digits, spaces, dashes (-) and slashes (/)!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtLocationKeyTyped

    // check validation for cell phone input
    private void txtCellphoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCellphoneKeyTyped
        char c = evt.getKeyChar();
        String phone = txtCellphone.getText();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        int length = (phone + c).length();

        if (length > 15) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Cell Phone field's max length is 15!!!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Cell Phone field must only contain digits!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtCellphoneKeyTyped

    // clear faculty detail, unselected all row on faculty table
    private void btnAddNewFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewFacultyActionPerformed
        txtFalcutyID.setEditable(true);
        txtFalcutyID.setText("");
        txtFacultyName.setText("");
        txtLocation.setText("");
        txtCellphone.setText("");
        reloadFacultyTable();
        facultyTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_btnAddNewFacultyActionPerformed

    // create new faculty
    private void btnSaveAddFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAddFacultyActionPerformed
        String facultyID = txtFalcutyID.getText().trim();
        String facultyName = txtFacultyName.getText().trim();
        String location = txtLocation.getText().trim();
        String cellphone = txtCellphone.getText().trim();

        FacultyDAO fdao = new FacultyDAO();
        int row = facultyTable.getSelectedRow();

        if (row != -1) {
            JOptionPane.showMessageDialog(this, "Unable to save new faculty information!\n"
                    + "Please click the 'Add New' button to clear the fields and prepare for new input.", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (facultyID.equals("") || facultyName.equals("") || location.equals("") || cellphone.equals("")) {
            JOptionPane.showMessageDialog(this, "All fields must not be empty!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (facultyID.length() < 5) {
            JOptionPane.showMessageDialog(this, "FaculttyID must have at least 5 characters!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (cellphone.length() < 9) {
            JOptionPane.showMessageDialog(this, "Phone number must have at least 9 digits!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (fdao.existFacultyID(facultyID) != null) {
            JOptionPane.showMessageDialog(this, "Faculty ID already exists! Please try another ID!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (fdao.existPhoneNumber(cellphone) != null) {
            JOptionPane.showMessageDialog(this, "This phone number already exists! Please try another one!", "Message",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            fdao.addNewFaculty(facultyID, facultyName, location, cellphone);
            JOptionPane.showMessageDialog(this, "Add successfull.", "Message", JOptionPane.INFORMATION_MESSAGE);
            reloadFacultyTable();
            reloadCmbFaculty();
            txtFalcutyID.setText("");
            txtFacultyName.setText("");
            txtLocation.setText("");
            txtCellphone.setText("");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnSaveAddFacultyActionPerformed

    // update faculty
    private void btnUpdateFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateFacultyActionPerformed
        String facultyID = txtFalcutyID.getText().trim();
        String facultyName = txtFacultyName.getText().trim();
        String location = txtLocation.getText().trim();
        String cellphone = txtCellphone.getText().trim();

        int row = facultyTable.getSelectedRow();

        FacultyDAO fdao = new FacultyDAO();

        if (row != -1) {
            if (!facultyName.isEmpty() && !location.isEmpty() && !cellphone.isEmpty()) {
                if (cellphone.length() >= 9) {
                    if (fdao.existPhoneNumber(cellphone) == null || fdao.getPhoneNumberByFacultyID(facultyID).equals(cellphone)) {
                        try {
                            fdao.saveUpdateFaculty(facultyName, location, cellphone, facultyID);
                            JOptionPane.showMessageDialog(this, "Faculty updated successfully.", "Message",
                                    JOptionPane.INFORMATION_MESSAGE);
                            reloadFacultyTable();
                            FacultyDTO fdto = fdao.getFacultyByID(facultyID);
                            txtFacultyName.setText(fdto.getFacultyName());
                            txtLocation.setText(fdto.getLocation());
                            txtCellphone.setText(fdto.getCellphone());
                        } catch (SQLException e) {
                            System.out.println(e.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "This phone number already exists. Please try another.", "Message",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Phone number must have at least 9 digits", "Message",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "All fields must not be empty.", "Message",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row in the faculty table to update.", "Message",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateFacultyActionPerformed

    // delete faculty
    private void btnDeleteFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteFacultyActionPerformed
        String facultyID = txtFalcutyID.getText();
        FacultyDAO fdao = new FacultyDAO();
        int row = facultyTable.getSelectedRow();

        if (row != -1) {
            if (fdao.checkFacultyHaveLecturer(facultyID) == null) {
                if (!facultyID.equals("")) {
                    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this faculty?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

                    if (confirm == JOptionPane.YES_OPTION) {
                        fdao.deleteFacultyByID(facultyID);
                        JOptionPane.showMessageDialog(this, "Faculty successfully deleted.", "Message",
                                JOptionPane.INFORMATION_MESSAGE);
                        reloadFacultyTable();
                        txtFalcutyID.setText("");
                        txtFacultyName.setText("");
                        txtLocation.setText("");
                        txtCellphone.setText("");
                        facultyTable.getSelectionModel().clearSelection();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please select a row in the faculty table to delete.", "Message",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "This faculty can't be deleted because it has a lecturer teaching.", "Message",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row in the faculty table to delete.", "Message",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteFacultyActionPerformed

    // reload some information when click on tabe pane
    private void tabedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabedPaneMouseClicked
        reloadCmbFaculty();
        txtFalcutyID.setText("");
        txtFacultyName.setText("");
        txtLocation.setText("");
        txtCellphone.setText("");
    }//GEN-LAST:event_tabedPaneMouseClicked

    // set data into lecturer detailed part when click on a row
    private void lecturerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lecturerTableMouseClicked
        int row = lecturerTable.getSelectedRow();
        String lecturerID = lecturerTable.getValueAt(row, 0).toString();
        String lecturerName = lecturerTable.getValueAt(row, 1).toString();
        String birthday = lecturerTable.getValueAt(row, 2).toString();
        String gender = lecturerTable.getValueAt(row, 3).toString();
        String ethnic = lecturerTable.getValueAt(row, 4).toString();
        String religion = lecturerTable.getValueAt(row, 5).toString();
        String nationality = lecturerTable.getValueAt(row, 6).toString();
        String address = lecturerTable.getValueAt(row, 7).toString();
        String subject = lecturerTable.getValueAt(row, 8).toString();
        String facultyID = lecturerTable.getValueAt(row, 9).toString();

        txtLecturerID.setEditable(false);

        DateFormat df = new SimpleDateFormat("yyyy/MM/dd");
        try {
            Date tmp1 = df.parse(birthday);
            btnBirthdayChooser.setDate(tmp1);
        } catch (ParseException e) {
            System.out.println(e.getMessage());
        }

        // reload Lecturer detailed part after data changed
        reloadLecturerDetail(lecturerID, lecturerName, birthday, gender, ethnic, religion, nationality, address, subject, facultyID);
    }//GEN-LAST:event_lecturerTableMouseClicked

    // validation for lecturerID input
    private void txtLecturerIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLecturerIDKeyTyped
        char c = evt.getKeyChar();
        String lecturerID = txtLecturerID.getText();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        int length = (lecturerID + c).length();
        if (length > 10) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Lecturer’s ID field's max length is 10!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isLetterOrDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Lecturer’s ID field must not contains special characters!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtLecturerIDKeyTyped

    // validation for lecturer full name input
    private void txtFullNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFullNameKeyTyped
        char c = evt.getKeyChar();
        String fullNameLec = txtFullName.getText();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        int length = (fullNameLec + c).length();
        if (length > 50) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Lecturer's Full Name field's max length is 50!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isLetter(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Lecturer’s Full Name must only contain letters!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtFullNameKeyTyped

    // validation for birth day chooser and set untype by keyboard
    private void btnBirthdayChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_btnBirthdayChooserPropertyChange
        String birthday = ((JTextField) btnBirthdayChooser.getDateEditor().getUiComponent()).getText();
        DateFormat df = new SimpleDateFormat("yyyy/MM/dd");
        LocalDate today = LocalDate.now();
        Date tmpDate;
        try {
            tmpDate = df.parse(birthday);
            LocalDate birthdate = tmpDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            Period period = Period.between(birthdate, today);
            int age = period.getYears();
            if (age <= 18) {
                JOptionPane.showMessageDialog(this, "Lecturer age must be more than 18 years old to register!!!", "Message", JOptionPane.ERROR_MESSAGE);
                btnBirthdayChooser.setDate(null);
            } else if (age >= 65) {
                JOptionPane.showMessageDialog(this, "Lecturer age can't be more than 65 years old!!!", "Message", JOptionPane.ERROR_MESSAGE);
                btnBirthdayChooser.setDate(null);
            }
        } catch (ParseException e) {
            System.out.println(e);
        }

        JTextFieldDateEditor editor = (JTextFieldDateEditor) btnBirthdayChooser.getDateEditor();
        editor.setEditable(false);
    }//GEN-LAST:event_btnBirthdayChooserPropertyChange

    // validation for address input
    private void txtAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAddressKeyTyped
        char c = evt.getKeyChar();
        String address = txtAddress.getText();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        String regex = "^[a-zA-Z0-9/ -]*$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(Character.toString(c));
        boolean isMatch = matcher.find();
        int length = (address + c).length();

        if (length > 100) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Address field's max length is 100!!!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!isMatch) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Address field must only contain letters, digits, spaces, dashes (-) and slashes (/)!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtAddressKeyTyped

    // validation for subject input
    private void txtSubjectKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSubjectKeyTyped
        char c = evt.getKeyChar();
        String subject = txtSubject.getText();

        switch (c) {
            case KeyEvent.VK_BACK_SPACE:
                return;
            case KeyEvent.VK_ESCAPE:
                return;
            case KeyEvent.VK_DELETE:
                return;
            case KeyEvent.VK_SPACE:
                evt.consume();
                return;
            case KeyEvent.VK_ENTER:
                return;
            default:
                break;
        }

        int length = (subject + c).length();

        if (length > 10) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Subject field's max length is 10!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        } else if (!Character.isLetterOrDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "The Subject field must only contain letters and digits!",
                    "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtSubjectKeyTyped

    // browse image path, show image and return a image path
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        try {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new FileFilter() {
                @Override
                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    } else {
                        return f.getName().toLowerCase().endsWith(".jpg");
                    }
                }

                @Override
                public String getDescription() {
                    return "Image File(*.jpg)";
                }
            });
            MainForm mainfrm = new MainForm();
            if (chooser.showOpenDialog(mainfrm) == JFileChooser.CANCEL_OPTION) {
                return;
            }

            File file = chooser.getSelectedFile();
            try {
                ImageIcon icon = new ImageIcon(file.getPath());
                Image img = resize(icon.getImage(), labelImage.getWidth(), labelImage.getHeight());
                ImageIcon resizedIcon = new ImageIcon(img);
                labelImage.setIcon(resizedIcon);
                filePath = file.getAbsolutePath();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    // clear lecturer detail, unselected all row on lecturer table
    private void btnAddLecturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLecturerActionPerformed
        clearFieldLecturer();
        reloadLecturerTable();
        lecturerTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_btnAddLecturerActionPerformed

    // create new lecturer
    private void btnSaveAddLecturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAddLecturerActionPerformed
        String lecturerId = txtLecturerID.getText().trim();
        String lecturerName = txtFullName.getText().trim();
        String birthday = ((JTextField) btnBirthdayChooser.getDateEditor().getUiComponent()).getText();
        String ethnic = (String) cmbEthnic.getSelectedItem();
        String religion = (String) cmbReligion.getSelectedItem();
        String nationality = (String) cmbNationality.getSelectedItem();
        String address = txtAddress.getText().trim();
        String facultyName = (String) cmbFaculty.getSelectedItem();

        int index = facultyName.indexOf(" ");
        String facultyID = facultyName.substring(0, index);
        String subject = txtSubject.getText().trim();

        LecturerDAO ldao = new LecturerDAO();
        byte[] fileContent;
        int row = lecturerTable.getSelectedRow();

        if (row != -1) {
            JOptionPane.showMessageDialog(this, "Unable to save new lecturer information!\n"
                    + "Please click the 'Add New' button to clear the fields and prepare for new input.", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (ldao.existLecturerID(lecturerId) != null) {
            JOptionPane.showMessageDialog(this, "Lecturer already exists. Please try another ID.", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (lecturerName.equals("") || birthday.equals("") || address.equals("") || lecturerId.equals("")) {
            JOptionPane.showMessageDialog(this, "All fields must not be empty.", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (filePath == null) {
            JOptionPane.showMessageDialog(this, "Please choose a picture to complete your profile.", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String gender = null;
        if (btnRadioMale.isSelected()) {
            gender = "True";
        } else if (btnRadioFemale.isSelected()) {
            gender = "False";
        }

        try {
            fileContent = FileUtils.readFileToByteArray(new File(filePath));
            String encodedString = Base64.getEncoder().encodeToString(fileContent);
            ldao.addNewLecturer(lecturerId, lecturerName, birthday, gender, encodedString, ethnic, religion, nationality, address, subject, facultyID);
            JOptionPane.showMessageDialog(this, "Add successful.", "Message", JOptionPane.INFORMATION_MESSAGE);
            reloadLecturerTable();
            clearFieldLecturer();
            if (gender.equals("True")) {
                btnRadioMale.setSelected(true);
            } else {
                btnRadioFemale.setSelected(true);
            }
        } catch (IOException | NoSuchAlgorithmException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnSaveAddLecturerActionPerformed

    // update lecturer
    private void btnUpdateLecturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateLecturerActionPerformed
        String lecturerId = txtLecturerID.getText().trim();
        String lecturerName = txtFullName.getText().trim();
        String birthday = ((JTextField) btnBirthdayChooser.getDateEditor().getUiComponent()).getText();
        String ethnic = (String) cmbEthnic.getSelectedItem();
        String religion = (String) cmbReligion.getSelectedItem();
        String nationality = (String) cmbNationality.getSelectedItem();
        String address = txtAddress.getText().trim();
        String subject = txtSubject.getText().trim();

        LecturerDAO ldao = new LecturerDAO();
        byte[] fileContent;
        int row = lecturerTable.getSelectedRow();

        String facultyName = (String) cmbFaculty.getSelectedItem();
        // get index of first " "
        int index = facultyName.indexOf(" ");
        // get FacultyID in cmbFaculty string
        String facultyID = facultyName.substring(0, index);

        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row on the lecturer table to update!!!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (lecturerName.equals("") || birthday.equals("") || address.equals("") || subject.equals("")) {
            JOptionPane.showMessageDialog(this, "All fields must be filled in!!!", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String gender = null;
        if (btnRadioMale.isSelected()) {
            gender = "True";
        } else if (btnRadioFemale.isSelected()) {
            gender = "False";
        }
        try {
            if (filePath != null) {
                fileContent = FileUtils.readFileToByteArray(new File(filePath));
                String encodedString = Base64.getEncoder().encodeToString(fileContent);
                ldao.updateLecturer(lecturerName, birthday, gender, encodedString, ethnic, religion, nationality, address, subject, facultyID, lecturerId);
            } else {
                String keepImage = ldao.getImageEndcodedStringByLecturerID(lecturerId);
                ldao.updateLecturer(lecturerName, birthday, gender, keepImage, ethnic, religion, nationality, address, subject, facultyID, lecturerId);
            }
            reloadLecturerDetail(lecturerId, lecturerName, birthday, gender, ethnic, religion, nationality, address, subject, facultyID);
            JOptionPane.showMessageDialog(this, "Update successful.", "Message", JOptionPane.INFORMATION_MESSAGE);
            reloadLecturerTable();
            if (gender.equals("True")) {
                btnRadioMale.setSelected(true);
            } else {
                btnRadioFemale.setSelected(true);
            }
        } catch (IOException | SQLException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateLecturerActionPerformed

    // delete lecturer
    private void btnDeleteLecturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteLecturerActionPerformed
        String lecturerID = txtLecturerID.getText();
        LecturerDAO ldao = new LecturerDAO();
        int row = lecturerTable.getSelectedRow();

        if (row != -1) {
            if (!lecturerID.equals("")) {
                int confirm = JOptionPane.showConfirmDialog(this, "Are you sure to delete this lecturer?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    ldao.deleteLecturerID(lecturerID);
                    JOptionPane.showMessageDialog(this, "Lecturer deleted successfully.", "Message",
                            JOptionPane.INFORMATION_MESSAGE);
                    clearFieldLecturer();
                    reloadLecturerTable();
                    lecturerTable.clearSelection();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row in the lecturer table to delete!!!", "Message",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row in the lecturer table to delete!!!", "Message",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteLecturerActionPerformed

    // reload faculty table after data changed
    private void reloadFacultyTable() {
        try {
            FacultyDAO fdao = new FacultyDAO();
            List<FacultyDTO> listF = fdao.getAllFaculty();
            DefaultTableModel facModel = (DefaultTableModel) facultyTable.getModel();
            int row = facultyTable.getSelectedRow();
            facModel.setRowCount(0);
            for (FacultyDTO o : listF) {
                facModel.addRow(new Object[]{
                    o.getFacultyID(), o.getFacultyName(), o.getLocation(), o.getCellphone()
                });
            }

            // if 1 row was clicked before clear all row on Faculty table then set old row clicked position again
            if (row != -1) {
                facultyTable.setRowSelectionInterval(row, row);
            }
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
    }

    // reload lecturer table after data changed
    private void reloadLecturerTable() {
        LecturerDAO ldao = new LecturerDAO();
        List<LecturerDTO> listL = ldao.getAllLecturer();
        DefaultTableModel model2 = (DefaultTableModel) lecturerTable.getModel();
        int row = lecturerTable.getSelectedRow();
        model2.setRowCount(0);
        for (LecturerDTO o : listL) {
            model2.addRow(new Object[]{
                o.getLecturerID(), o.getLecturerName(), o.getBirthday(), o.isGender() == true ? "Male" : "Female", o.getEthnic(), o.getReligion(),
                o.getNationality(), o.getAddress(), o.getSubject(), o.getFacultyID()
            });
        }

        // if 1 row was clicked before clear all row on Lecturer table then set old row clicked position again
        if (row != -1) {
            lecturerTable.setRowSelectionInterval(row, row);
        }
    }

    // resize image
    private static Image resize(Image originalImage, int targetWidth, int targetHeight) {
        Image resultingImage = originalImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);
        return resultingImage;
    }

    // clear lecturer detail
    private void clearFieldLecturer() {
        txtLecturerID.setText("");
        txtLecturerID.setEditable(true);
        txtFullName.setText("");
        labelImage.setIcon(new ImageIcon());
        btnBirthdayChooser.setDate(null);
        btnRadioMale.setSelected(true);
        txtAddress.setText("");
        txtSubject.setText("");
        btnRadioMale.setSelected(true);
        cmbEthnic.setSelectedIndex(0);
        cmbReligion.setSelectedIndex(0);
        cmbNationality.setSelectedIndex(0);
        cmbFaculty.setSelectedIndex(0);
    }

    // center mainform
    public static void centreWindow(Window frame) {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
        frame.setLocation(x, y);
    }

    // reload lecturer detail after data changed
    private void reloadLecturerDetail(String lecturerID, String lecturerName, String birthday, String gender, String ethnic,
            String religion, String nationality, String address, String subject, String facultyID) {

        LecturerDAO ldao = new LecturerDAO();

        txtLecturerID.setText(lecturerID);
        txtFullName.setText(lecturerName);
        txtAddress.setText(address);
        txtSubject.setText(subject);

        // image
        String encodedString = ldao.getImageEndcodedStringByLecturerID(lecturerID); // get endcoded string of image by LecturerID
        if (encodedString != null) {
            // parse endcoded string to byte array by Base64
            byte[] decodedBytes = Base64.getDecoder().decode(encodedString);
            try {
                // write byte array to a text file
                FileUtils.writeByteArrayToFile(new File("C:\\Users\\Admin\\Documents\\NetBeansProjects\\SE140506_NguyenLeHoangChinh_J2.L.P0001\\image.jpg"), decodedBytes);
                // declare new file contain byte array to read
                File img = new File("C:\\Users\\Admin\\Documents\\NetBeansProjects\\SE140506_NguyenLeHoangChinh_J2.L.P0001\\image.jpg");
                // read and recreate image from byte array  file
                Image pimg = ImageIO.read(img);
                // set and show image in a label
                labelImage.setIcon(new ImageIcon(pimg.getScaledInstance(labelImage.getWidth(), labelImage.getHeight(), Image.SCALE_SMOOTH)));
            } catch (IOException ex) {
                System.out.println("IOException at lecturerTableMouseClicked() function - image handle part.");
            }
        } else {
            labelImage.setIcon(null);
        }

        // birthday
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date date = format.parse(birthday);
            btnBirthdayChooser.setDate(date);
        } catch (ParseException ex) {
            System.out.println("ParseException at reloadLecturerDetail - date handle part");
        }

        // gender 
        if (gender.equalsIgnoreCase("Male")) {
            btnRadioMale.setSelected(true);
            btnRadioFemale.setSelected(false);
        } else {
            btnRadioMale.setSelected(false);
            btnRadioFemale.setSelected(true);
        }

        // ethnic 
        int i = 0;
        while (true) {
            String ethnicFromCmb = cmbEthnic.getItemAt(i);
            if (ethnicFromCmb.equalsIgnoreCase(ethnic)) {
                cmbEthnic.setSelectedIndex(i);
                break;
            }
            i++;
        }

        // religion 
        int j = 0;
        while (true) {
            String religionFromCmb = cmbReligion.getItemAt(j);
            if (religionFromCmb.equalsIgnoreCase(religion)) {
                cmbReligion.setSelectedIndex(j);
                break;
            }
            j++;
        }

        // nationality  
        int t = 0;
        while (true) {
            String nationalityFromCmb = cmbNationality.getItemAt(t);
            if (nationalityFromCmb.equalsIgnoreCase(nationality)) {
                cmbNationality.setSelectedIndex(t);
                break;
            }
            t++;
        }

        // faculty name
        int n = 0;
        while (true) {
            String facultyFromCmb = cmbFaculty.getItemAt(n);
            FacultyDAO fdao = new FacultyDAO();
            FacultyDTO fdto = fdao.getFacultyByID(facultyID);
            if (facultyFromCmb.equalsIgnoreCase(facultyID + " - " + fdto.getFacultyName())) {
                cmbFaculty.setSelectedIndex(n);
                break;
            }
            n++;
        }
    }

    // reload faculty combobox ater data changed
    public void reloadCmbFaculty() {
        FacultyDAO fdao = new FacultyDAO();
        List<FacultyDTO> listF = fdao.getAllFaculty();
        cmbFaculty.removeAllItems();
        for (FacultyDTO o : listF) {
            cmbFaculty.addItem(o.getFacultyID() + " - " + o.getFacultyName());
        }
        reloadLecturerTable();
        clearFieldLecturer();
        facultyTable.getSelectionModel().clearSelection();
        lecturerTable.getSelectionModel().clearSelection();
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainForm().setVisible(true);
                } catch (SQLException ex) {
                    System.out.println("SQLException exception at main - MainForm" + ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddLecturer;
    private javax.swing.JButton btnAddNewFaculty;
    private com.toedter.calendar.JDateChooser btnBirthdayChooser;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnDeleteFaculty;
    private javax.swing.JButton btnDeleteLecturer;
    private javax.swing.JRadioButton btnRadioFemale;
    private javax.swing.JRadioButton btnRadioMale;
    private javax.swing.JButton btnSaveAddFaculty;
    private javax.swing.JButton btnSaveAddLecturer;
    private javax.swing.JButton btnUpdateFaculty;
    private javax.swing.JButton btnUpdateLecturer;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbEthnic;
    private javax.swing.JComboBox<String> cmbFaculty;
    private javax.swing.JComboBox<String> cmbNationality;
    private javax.swing.JComboBox<String> cmbReligion;
    private javax.swing.JTable facultyTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JLabel labelCheckPhone;
    private javax.swing.JLabel labelFacultyIDLec;
    private javax.swing.JLabel labelImage;
    private javax.swing.JTable lecturerTable;
    private javax.swing.JTabbedPane tabedPane;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtCellphone;
    private javax.swing.JTextField txtFacultyName;
    private javax.swing.JTextField txtFalcutyID;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtLecturerID;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtSubject;
    // End of variables declaration//GEN-END:variables
}
